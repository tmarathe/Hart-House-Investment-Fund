lik =  1/(2*pi*sigma^2*sqrt(1-rho^2)) * exp(-(X[[i,1]]^2 + X[[i,2]]^2 - 2*rho*X[[i,1]]*X[[i,2]]) / (2*(1-rho^2)*sigma^2))
prod = prod * lik
}
prod
}
bvn_normalize <- function (X, sigma,rho)
{
int1 <- integrate(function(rho) {
sapply(rho, function(rho){
integrate(function(sigma) bvn_prior(sigma,rho)*bvn_likelihood(X,sigma,rho),0,Inf)$value
})
},-1,0)$value
int2 <- integrate(function(rho) {
sapply(rho, function(rho){
integrate(function(sigma) bvn_prior(sigma,rho)*bvn_likelihood(X,sigma,rho),0,Inf)$value
})
}, 0, 1)$value
int= int1+int2
int
}
bvn_posterior_rho <- function (X,rho)
{
posterior <- function (sigma) bvn_prior(sigma,rho)*bvn_likelihood(X,sigma,rho)*(1/(bvn_normalize(X,sigma,rho)))
marginal_rho <- integrate(posterior,0,Inf)$value
marginal_rho
}
plot_marginal_prior <-function(param)#input either "rho" or "sigma"
{
if (param == "rho") plot(function(rho) 1/(4*abs(rho)^0.5), xlim = c(-1,1),
main = "Prior Density of Rho",
xlab = "Rho",
ylab = "Density")
if (param == "sigma") plot(function(sigma) exp(-sigma),
main = "Prior Density of Sigma",
xlab = "Sigma",
ylab = "Density")
if ((param != "rho") & (param != "sigma") ) stop("please enter either rho or sigma")
}
plot_posterior_rho <- function(X,rho)
{
marginal = numeric(length(rho))
for (i in 1:length(rho))
{
marginal[i] = bvn_posterior_rho(X,rho[i])
}
plot(rho,marginal,ylim = c(0,5),
main = "Marginal Posterior Density of Rho for Xa", ylab = "Density", xlab = "Rho")
}
plot_posterior_rho(Xa,seq(-0.99,0.99,0.02))
#plot_posterior_rho(Xb,seq(-0.99,0.99,0.02))
plot_posterior_rho <- function(X,rho)
{
marginal = numeric(length(rho))
for (i in 1:length(rho))
{
marginal[i] = bvn_posterior_rho(X,rho[i])
}
plot(rho,marginal,ylim = c(0,5),
main = "Marginal Posterior Density of Rho for Xb", ylab = "Density", xlab = "Rho")
}
plot_posterior_rho(Xb,seq(-0.99,0.99,0.02))
#bonus
underflow_Xa <- function (sigma, rho) #trye value for sigma is 1, rho = 0
{
n= 200
l = 1
while (l !=0){
set.seed(1)
x1 <- rnorm(n); x2 <- rnorm(n);
Xa <- cbind (x1, x2)
l = bvn_likelihood(Xa,sigma,rho)
n=n+1
}
n
}
underflow_Xb <- function (sigma, rho) #true value for sigma is 1.25 and rho is 0.2
{
n= 200
l = 1
while (l !=0){
set.seed(1)
x1 <- rnorm(n); x2 <- rnorm(n); z <- rnorm(n)
Xb <- cbind (x1+0.5*z, x2+0.5*z)
l = bvn_likelihood(Xb,sigma,rho)
n=n+1
}
n
}
underflow_Xa(1,0)
underflow_Xb(1.25,0.2)
test <- function(n)
{
x1 <- rnorm(n); x2 <- rnorm(n); z <- rnorm(n)
Xb <- cbind (x1+0.5*z, x2+0.5*z)
xb
}
test(100)
test <- function(n)
{
x1 <- rnorm(n); x2 <- rnorm(n); z <- rnorm(n)
Xb <- cbind (x1+0.5*z, x2+0.5*z)
Xb
}
test(100)
test <- function(n)
{
x1 <- rnorm(n); x2 <- rnorm(n); z <- rnorm(n)
Xb <- cbind (x1+0.5*z, x2+0.5*z)
cor[Xb]
}
test <- function(n)
{
x1 <- rnorm(n); x2 <- rnorm(n); z <- rnorm(n)
Xb <- cbind (x1+0.5*z, x2+0.5*z)
cor[Xb]
}
test(100)
x1 <- rnorm(n); x2 <- rnorm(n); z <- rnorm(n)
Xb <- cbind (x1+0.5*z, x2+0.5*z)
test <- function(n)
{
x1 <- rnorm(n); x2 <- rnorm(n); z <- rnorm(n)
Xb <- cbind (x1+0.5*z, x2+0.5*z)
cor(Xb)
}
test(100)
test(100)
test(1000)
xb
Xb
Xb[,1]
test <- function(n)
{
t = numeric(n)
for (1 in 1:n)
{
x1 <- rnorm(100); x2 <- rnorm(100); z <- rnorm(100)
Xb <- cbind (x1+0.5*z, x2+0.5*z)
t[i] = cor(Xb[,1],Xb[,2])
}
t
}
test <- function(n)
{
t = numeric(n)
for (i in 1:n)
{
x1 <- rnorm(100); x2 <- rnorm(100); z <- rnorm(100)
Xb <- cbind (x1+0.5*z, x2+0.5*z)
t[i] = cor(Xb[,1],Xb[,2])
}
t
}
test(10)
test <- function(n)
{
t = numeric(n)
for (i in 1:n)
{
x1 <- rnorm(100); x2 <- rnorm(100); z <- rnorm(100)
Xb <- cbind (x1+0.5*z, x2+0.5*z)
t[i] = cor(Xb[,1],Xb[,2])
}
mean(t)
}
test(10)
test(100)
test(1000)
test(10000)
bvn_posterior_rho(Xb,rho)
#question 2
set.seed(1)
n <- 40
x1 <- rnorm(n); x2 <- rnorm(n); z <- rnorm(n)
Xa <- cbind (x1, x2); Xb <- cbind (x1+0.5*z, x2+0.5*z)
#bivariate normal, X = c(X1,X2) is the individual, mean is 0
bvn_prior <- function (sigma, rho)
{exp(-sigma)/(4*(abs(rho))^0.5)}
bvn_likelihood <- function(X,sigma,rho)
{
prod = 1
for (i in (1:(length(X)/2)))
{
lik =  1/(2*pi*sigma^2*sqrt(1-rho^2)) * exp(-(X[[i,1]]^2 + X[[i,2]]^2 - 2*rho*X[[i,1]]*X[[i,2]]) / (2*(1-rho^2)*sigma^2))
prod = prod * lik
}
prod
}
bvn_normalize <- function (X, sigma,rho)
{
int1 <- integrate(function(rho) {
sapply(rho, function(rho){
integrate(function(sigma) bvn_prior(sigma,rho)*bvn_likelihood(X,sigma,rho),0,Inf)$value
})
},-1,0)$value
int2 <- integrate(function(rho) {
sapply(rho, function(rho){
integrate(function(sigma) bvn_prior(sigma,rho)*bvn_likelihood(X,sigma,rho),0,Inf)$value
})
}, 0, 1)$value
int= int1+int2
int
}
bvn_posterior_rho <- function (X,rho)
{
posterior <- function (sigma) bvn_prior(sigma,rho)*bvn_likelihood(X,sigma,rho)*(1/(bvn_normalize(X,sigma,rho)))
marginal_rho <- integrate(posterior,0,Inf)$value
marginal_rho
}
plot_marginal_prior <-function(param)#input either "rho" or "sigma"
{
if (param == "rho") plot(function(rho) 1/(4*abs(rho)^0.5), xlim = c(-1,1),
main = "Prior Density of Rho",
xlab = "Rho",
ylab = "Density")
if (param == "sigma") plot(function(sigma) exp(-sigma),
main = "Prior Density of Sigma",
xlab = "Sigma",
ylab = "Density")
if ((param != "rho") & (param != "sigma") ) stop("please enter either rho or sigma")
}
plot_posterior_rho <- function(X,rho)
{
marginal = numeric(length(rho))
for (i in 1:length(rho))
{
marginal[i] = bvn_posterior_rho(X,rho[i])
}
plot(rho,marginal,ylim = c(0,5),
main = "Marginal Posterior Density of Rho for Xb", ylab = "Density", xlab = "Rho")
}
#bonus
underflow_Xa <- function (sigma, rho) #true value for sigma is 1, rho = 0
{
n= 200
l = 1
while (l !=0){
set.seed(1)
x1 <- rnorm(n); x2 <- rnorm(n);
Xa <- cbind (x1, x2)
l = bvn_likelihood(Xa,sigma,rho)
n=n+1
}
n
}
underflow_Xb <- function (sigma, rho) #true value for sigma is 1.25 and rho is 0.2
{
n= 200
l = 1
while (l !=0){
set.seed(1)
x1 <- rnorm(n); x2 <- rnorm(n); z <- rnorm(n)
Xb <- cbind (x1+0.5*z, x2+0.5*z)
l = bvn_likelihood(Xb,sigma,rho)
n=n+1
}
n
}
bvn_posterior_rho(Xb,rho)
bvn_posterior_rho(Xb,0)
bvn_posterior_rho(Xa,0)
cov(Xb)
cor(Xb)
max(c(3,5))
max_posterior_rho <- function(X,rho)
{
marginal = numeric(length(rho))
for (i in 1:length(rho))
{
marginal[i] = bvn_posterior_rho(X,rho[i])
}
max(marginal)
}
#question 2
set.seed(1)
n <- 40
x1 <- rnorm(n); x2 <- rnorm(n); z <- rnorm(n)
Xa <- cbind (x1, x2); Xb <- cbind (x1+0.5*z, x2+0.5*z)
max_posterior_rho(Xa,rho)
max_posterior_rho(Xa,seq(-0.99,0.99,0.02))
max_posterior_rho(Xa,seq(0.19,0.99,0.02))
#Holdings as of 2/16/2015
#We do not change holdings frequently so I will only update the holdings if we have new transactions
#please set work space appropriately
#after running the code, call portfolio_value,cash and portfolio_weight
setwd("C:/Users/kevinhu/Dropbox/HHIF Quant/Portfolio/Weight Calculations")
#mannually input the symbols of the tickers that are not included in the SP500 and NOT including the sector ETFs
SP500_out<-c("CAS.TO","VNQ")
library(quantmod)
###########loading data##########
data<- read.csv("Weights.csv", header=T,stringsAsFactors=F) #change everything to number
SP500companies <- read.csv("tickers.csv", header=T)
portfolio_tickers<-data$Ticker
portfolio_positions<-data$Position
portfolio_costs<-data$Cost
#####SP500 weights ###########
Symbol <- as.character(SP500companies$Ticker) #S&P 500 tickers
what_metrics <- yahooQF(c("Last Trade (Price Only)","Market Capitalization"))
SP500_data <- getQuote(Symbol, what = what_metrics)
aux <- as.character(SP500_data$"Market Capitalization")
SP500_marketcap <- as.numeric(substr(aux, start=1, stop=nchar(aux)-1)) #get rid of the trash, selecting only the number
dig <- substr(aux, start=nchar(aux), stop=nchar(aux))  #hold the multiplier
SP500_marketcap[which(is.na(SP500_marketcap))]=mean(na.omit(SP500_marketcap))*1e9
for(i in 1:length(SP500_marketcap)){
if(dig[i] == "B"){
SP500_marketcap[i] <- SP500_marketcap[i]*1e9
}
if(dig[i] == "M"){
SP500_marketcap[i] <- SP500_marketcap[i]*1e6
}
}
SP500_weights<- SP500_marketcap/sum(SP500_marketcap)
########portfolio value################
portfolio_data<- getQuote(portfolio_tickers, what = what_metrics)
portfolio_value<-sum(portfolio_positions*portfolio_data$Last)
########portfolio market caps################
#split into 3 groups SP500_in=picks in S&P500, SP500_out=picks not in S&P500, ETF= etf holdings
SP500_in_ind<- which(portfolio_tickers %in% Symbol)
SP500_in<- portfolio_tickers[SP500_in_ind] #symbols of stock in portfolio that are in the SP500
#SP500_out is user input
SP500_out_ind<- which(portfolio_tickers %in% SP500_out)
not_ETF<-c(SP500_in,SP500_out)
ETF_ind<- which(!portfolio_tickers %in% not_ETF)
ETF<-portfolio_tickers[ETF_ind]
#calculations
O<-1 #initialize
for (i in 1:length(SP500_out_ind))
{
O[i]= portfolio_positions[SP500_out_ind[i]]*portfolio_data$Last[SP500_out_ind[i]]
}
I<-1 #initialize
for (i in 1:length(SP500_in_ind))
{
I[i]= portfolio_positions[SP500_in_ind[i]]*portfolio_data$Last[SP500_in_ind[i]]
}
E<-1 #initialize
for (i in 1:length(ETF_ind))
{
E[i]= portfolio_positions[ETF_ind[i]]*portfolio_data$Last[ETF_ind[i]]
}
SP500_out_marketcap<-sum(O)
ETF_marketcap<- sum(E)
SP500_in_marketcap<- sum(I)
#check
(SP500_out_marketcap + ETF_marketcap + SP500_in_marketcap)== portfolio_value
##############portfolio weights################
#pre-allocation
portfolio_weights<- matrix(data=NA, nrow= (length(SP500_out)+length(Symbol)), ncol=2)
holdings<-c(Symbol,SP500_out)
portfolio_weights[,1] <- holdings
#SP500_out
SP500_out_weights<-rep(0,length(SP500_out))
O_ind_h<-which(holdings %in% SP500_out)
O_ind_p<-which(portfolio_tickers %in% SP500_out)
for (i in 1:length(SP500_out_weights))
{
SP500_out_weights[i]<- portfolio_positions[O_ind_p[i]]*portfolio_data$Last[O_ind_p[i]]/portfolio_value
portfolio_weights[O_ind_h[i],2]<-SP500_out_weights[i]
}
#ETFs
ETF_weights<-rep(0,length(Symbol))
ETF_ind_h<-which(holdings %in% Symbol)
ETF_weights<- SP500_weights * (ETF_marketcap/portfolio_value)
for (i in 1:length(ETF_weights))
{
portfolio_weights[ETF_ind_h[i],2]<-ETF_weights[i]
}
#ETFs+ SP500_in
SP500_in_weights<-rep(0,length(SP500_in))
I_ind_h<-which(holdings %in% SP500_in)
I_ind_p<-which(portfolio_tickers %in% SP500_in)
for (i in 1:length(SP500_in_weights))
{
SP500_in_weights[i]<- (portfolio_positions[I_ind_p[i]]*portfolio_data$Last[I_ind_p[i]]/portfolio_value) + ETF_weights[I_ind_h[i]]
portfolio_weights[I_ind_h[i],2]<-SP500_in_weights[i]
}
#check should round to 1
sum(as.numeric(portfolio_weights[,2]))
#Cash
total_cost<- sum(portfolio_costs)
cash<-10000000+total_cost
#sorting
portfolio_weights_f<- data.frame(portfolio_weights)
sorted_portfolio_weights<- portfolio_weights[order(portfolio_weights_f$X2,decreasing=TRUE),]
#portfolio_value
#cash
#sorted_portfolio_weights
write.csv(data.frame(sorted_portfolio_weights),"ranked_holdings.csv")
#Holdings as of 2/16/2015
#We do not change holdings frequently so I will only update the holdings if we have new transactions
#please set work space appropriately
#after running the code, call portfolio_value,cash and portfolio_weight
setwd("C:/Users/Kevin Hu/Desktop/Dropbox/HHIF Quant/Portfolio/Weight Calculations")
#mannually input the symbols of the tickers that are not included in the SP500 and NOT including the sector ETFs
SP500_out<-c("CAS.TO","VNQ")
library(quantmod)
###########loading data##########
data<- read.csv("Weights.csv", header=T,stringsAsFactors=F) #change everything to number
SP500companies <- read.csv("tickers.csv", header=T)
portfolio_tickers<-data$Ticker
portfolio_positions<-data$Position
portfolio_costs<-data$Cost
#####SP500 weights ###########
Symbol <- as.character(SP500companies$Ticker) #S&P 500 tickers
what_metrics <- yahooQF(c("Last Trade (Price Only)","Market Capitalization"))
SP500_data <- getQuote(Symbol, what = what_metrics)
aux <- as.character(SP500_data$"Market Capitalization")
SP500_marketcap <- as.numeric(substr(aux, start=1, stop=nchar(aux)-1)) #get rid of the trash, selecting only the number
dig <- substr(aux, start=nchar(aux), stop=nchar(aux))  #hold the multiplier
SP500_marketcap[which(is.na(SP500_marketcap))]=mean(na.omit(SP500_marketcap))*1e9
for(i in 1:length(SP500_marketcap)){
if(dig[i] == "B"){
SP500_marketcap[i] <- SP500_marketcap[i]*1e9
}
if(dig[i] == "M"){
SP500_marketcap[i] <- SP500_marketcap[i]*1e6
}
}
SP500_weights<- SP500_marketcap/sum(SP500_marketcap)
########portfolio value################
portfolio_data<- getQuote(portfolio_tickers, what = what_metrics)
portfolio_value<-sum(portfolio_positions*portfolio_data$Last)
########portfolio market caps################
#split into 3 groups SP500_in=picks in S&P500, SP500_out=picks not in S&P500, ETF= etf holdings
SP500_in_ind<- which(portfolio_tickers %in% Symbol)
SP500_in<- portfolio_tickers[SP500_in_ind] #symbols of stock in portfolio that are in the SP500
#SP500_out is user input
SP500_out_ind<- which(portfolio_tickers %in% SP500_out)
not_ETF<-c(SP500_in,SP500_out)
ETF_ind<- which(!portfolio_tickers %in% not_ETF)
ETF<-portfolio_tickers[ETF_ind]
#calculations
O<-1 #initialize
for (i in 1:length(SP500_out_ind))
{
O[i]= portfolio_positions[SP500_out_ind[i]]*portfolio_data$Last[SP500_out_ind[i]]
}
I<-1 #initialize
for (i in 1:length(SP500_in_ind))
{
I[i]= portfolio_positions[SP500_in_ind[i]]*portfolio_data$Last[SP500_in_ind[i]]
}
E<-1 #initialize
for (i in 1:length(ETF_ind))
{
E[i]= portfolio_positions[ETF_ind[i]]*portfolio_data$Last[ETF_ind[i]]
}
SP500_out_marketcap<-sum(O)
ETF_marketcap<- sum(E)
SP500_in_marketcap<- sum(I)
#check
(SP500_out_marketcap + ETF_marketcap + SP500_in_marketcap)== portfolio_value
##############portfolio weights################
#pre-allocation
portfolio_weights<- matrix(data=NA, nrow= (length(SP500_out)+length(Symbol)), ncol=2)
holdings<-c(Symbol,SP500_out)
portfolio_weights[,1] <- holdings
#SP500_out
SP500_out_weights<-rep(0,length(SP500_out))
O_ind_h<-which(holdings %in% SP500_out)
O_ind_p<-which(portfolio_tickers %in% SP500_out)
for (i in 1:length(SP500_out_weights))
{
SP500_out_weights[i]<- portfolio_positions[O_ind_p[i]]*portfolio_data$Last[O_ind_p[i]]/portfolio_value
portfolio_weights[O_ind_h[i],2]<-SP500_out_weights[i]
}
#ETFs
ETF_weights<-rep(0,length(Symbol))
ETF_ind_h<-which(holdings %in% Symbol)
ETF_weights<- SP500_weights * (ETF_marketcap/portfolio_value)
for (i in 1:length(ETF_weights))
{
portfolio_weights[ETF_ind_h[i],2]<-ETF_weights[i]
}
#ETFs+ SP500_in
SP500_in_weights<-rep(0,length(SP500_in))
I_ind_h<-which(holdings %in% SP500_in)
I_ind_p<-which(portfolio_tickers %in% SP500_in)
for (i in 1:length(SP500_in_weights))
{
SP500_in_weights[i]<- (portfolio_positions[I_ind_p[i]]*portfolio_data$Last[I_ind_p[i]]/portfolio_value) + ETF_weights[I_ind_h[i]]
portfolio_weights[I_ind_h[i],2]<-SP500_in_weights[i]
}
#check should round to 1
sum(as.numeric(portfolio_weights[,2]))
#Cash
total_cost<- sum(portfolio_costs)
cash<-10000000+total_cost
#sorting
portfolio_weights_f<- data.frame(portfolio_weights)
sorted_portfolio_weights<- portfolio_weights[order(portfolio_weights_f$X2,decreasing=TRUE),]
#portfolio_value
#cash
#sorted_portfolio_weights
write.csv(data.frame(sorted_portfolio_weights),"ranked_holdings.csv")
portfolio_value
portfolio_value+cash
test <- read.csv("C:/Users/Kevin Hu/Desktop/Dropbox/HHIF Quant/Portfolio/test.csv", header=FALSE)
View(test)
test$V1
library(PerformanceAnalytics)
ra<-test$V1
rb<-test$V2
library(PerformanceAnalytics)
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
ra<-test$V1
rb<-test$V2
TrackingError(ra,rb)
ra<-ts(test$V1)
rb<-ts(test$V2)
TrackingError(ra,rb)
